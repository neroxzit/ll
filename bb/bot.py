import asyncio
import logging
import sys
import sqlite3
import urllib3
import asyncio
import requests
import random
import time
import json

from datetime import datetime, timedelta
from aiogram import F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command, StateFilter
from aiogram.fsm.strategy import FSMStrategy
from aiogram.fsm.context import FSMContext
from operator import itemgetter
from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.utils.markdown import hbold
from aiogram.fsm.state import default_state
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup

ADMINID = [1404114574]
TOKEN = "7063341831:AAFX80TtAyeQyW4rqZpx9mwBWco1xzrAnzA"
DATABASE_FILE_GIVEAWAYS = 'giveaways.db'
DATABASE_FILE_USERS = 'users.db'

dp = Dispatcher(storage=MemoryStorage())
users_display_modes = {}
users_sort_modes = {}
max_retries = 1
retry_delay = 5

class MyForm(StatesGroup):
    message = State()
    media = State() 

def format_date_for_query(date_str):
    date_obj = datetime.strptime(date_str, "%d.%m.%Y")
    return date_obj.strftime("%Y-%m-%d %H:%M:%S")

def get_channels_by_date(target_date):
    connection = sqlite3.connect(DATABASE_FILE_GIVEAWAYS)
    cursor = connection.cursor()

    formatted_date = format_date_for_query(target_date)

    cursor.execute('''
        SELECT title, username, quantity, months, until_date, postid, subscribe, joke1, joke2, joke3, joke4, joke5, joke6, joke7, joke8, joke9, joke10
        FROM giveaways
        WHERE SUBSTR(until_date, 1, 10) = ? AND username IS NOT NULL
        ORDER BY quantity DESC
    ''', (formatted_date[:10],))

    channels_for_date = cursor.fetchall()
    channels_for_date = [(name, username, quantity, months, datetime.strptime(until_date, "%Y-%m-%d %H:%M:%S"), postid, subscribe, joke1, joke2, joke3, joke4, joke5, joke6, joke7, joke8, joke9, joke10)
                         for name, username, quantity, months, until_date, postid, subscribe, joke1, joke2, joke3, joke4, joke5, joke6, joke7, joke8, joke9, joke10 in channels_for_date]

    connection.close()
    return channels_for_date

async def save_user_to_database(user_id, username, full_name):
    connection = sqlite3.connect(DATABASE_FILE_USERS)
    cursor = connection.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT,
            full_name TEXT
        )
    ''')

    cursor.execute('SELECT id FROM users WHERE id = ?', (user_id,))
    existing_user = cursor.fetchone()

    if not existing_user:
        cursor.execute('''
            INSERT INTO users (id, username, full_name)
            VALUES (?, ?, ?)
        ''', (user_id, username, full_name))
    else:
        cursor.execute('''
            UPDATE users
            SET username = ?, full_name = ?
            WHERE id = ?
        ''', (username, full_name, user_id))

    connection.commit()
    connection.close()

def startmenu():
    kb = [
        [
            types.KeyboardButton(text="üîé –ù–∞ —Å–µ–≥–æ–¥–Ω—è"),
            types.KeyboardButton(text="üîç –ù–∞ –∑–∞–≤—Ç—Ä–∞"),
        ],
        [
            types.KeyboardButton(text="üîÑ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ"),
            types.KeyboardButton(text="üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞"),
        ],
        [
            types.KeyboardButton(text="üìä –¢–û–ü –¥–Ω–∏"),
            types.KeyboardButton(text="üìä –¢–û–ü –∫–∞–Ω–∞–ª—ã")

        ],
        [   types.KeyboardButton(text="üõç –ö—ç—à–±–µ–∫"),
            types.KeyboardButton(text="‚ùì FAQ / –ü–æ–º–æ—â—å")
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
    )

    return keyboard

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = f"{message.from_user.first_name} {message.from_user.last_name}"

    await save_user_to_database(user_id, username, full_name)

    connection_users = sqlite3.connect(DATABASE_FILE_USERS)
    cursor_users = connection_users.cursor()
    cursor_users.execute("SELECT COUNT(*) FROM users")
    user_count = cursor_users.fetchone()[0]
    connection_users.close()

    connection_giveaways = sqlite3.connect(DATABASE_FILE_GIVEAWAYS)
    cursor_giveaways = connection_giveaways.cursor()
    cursor_giveaways.execute("SELECT COUNT(DISTINCT username) FROM giveaways WHERE username IS NOT NULL")
    unique_channels_count = cursor_giveaways.fetchone()[0]
    cursor_giveaways.execute("SELECT COUNT(*) FROM giveaways WHERE username IS NOT NULL")
    giveaways_count = cursor_giveaways.fetchone()[0]
    cursor_giveaways.execute("SELECT SUM(quantity) FROM giveaways WHERE username IS NOT NULL")
    total_quantity = cursor_giveaways.fetchone()[0] or 0
    connection_giveaways.close()

    greetings = [
    "ÿßÿÆÿ®ÿßÿ±ŸÉ ÿßŸä Ÿäÿß, {name} ‚úåüèª",
    "ŸÖÿ±ÿ≠ÿ®Ÿãÿß, {name} üòÅ",
    "ŸÉŸäŸÅ ÿ≠ÿßŸÑŸÉ, {name} üöÄ",
    "ÿ¥ÿÆÿ®ÿßÿ±ŸÉ, {name} ü§ôüèª"
    ]

    selected_greeting = random.choice(greetings)

    formatted_greeting = selected_greeting.format(name=message.from_user.full_name)

    await message.answer(f"""
{formatted_greeting}
–Ø - —Ç–≤–æ–π <b>–ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–æ–∫</b> –ø–æ –¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–∞–º. üéâ

    <b>üìä ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ÿßŸÑÿ®Ÿàÿ™:</b>
ÿπÿØÿØ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ: <code>{user_count}</code>
–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: <code>{unique_channels_count}</code>
–ü—Ä–æ–≤–µ–¥–µ–Ω–æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: <code>{giveaways_count}</code>
–í—Å–µ–≥–æ —Ç–≥–ø –ø–æ–¥–∞—Ä–µ–Ω–æ: <code>{total_quantity}</code>

–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É <b>—Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ</b>, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –≥–¥–µ <b>—Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞</b> –ø—Ä–æ—Ö–æ–¥—è—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∏

–ù–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–µ–º–∏—É–º –∏ —Å–ª–µ–¥–∏ –∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏! üåü""", reply_markup=startmenu())

def get_keyboard():
    buttons = [
        [
            types.InlineKeyboardButton(text="üëë –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ/–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", url="https://t.me/LztBab")
        ],
        [
            types.InlineKeyboardButton(text="üßæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª", url="https://t.me/gifttelegrampremiums")
        ],
        [
            types.InlineKeyboardButton(text="üõç –ö—ç—à–±–µ–∫", url="https://t.me/GetHalyava")
        ]
        ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

@dp.message(F.text == 'üõç –ö—ç—à–±–µ–∫')
async def quick_buttons_handler(message: types.Message):
    await message.answer(f'üë• {message.from_user.full_name}, –Ω–∞—à–ª–∏ –¥–ª—è —Ç–µ–±—è –∫–∞–Ω–∞–ª —Å —Å–∫–∏–¥–∫–∞–º–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º\n\n'
                         f'üíØ–í—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏\n'
                         f'‚û°Ô∏è–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è \n'
                         f'‚ÑπÔ∏è–£–¥–æ–±–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!\n\n'
                         f'–°–∫–æ—Ä–µ–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –∏ –¥–µ–ª–∏—Å—å –Ω–∞—à–∏–º –∫–∞–Ω–∞–ª–æ–º —Å–æ —Å–≤–æ–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏! \n\n'
                         f'üöÄ @GetHalyava - –Ω–∞–∂–º–∏ —á—Ç–æ–±—ã –∑–∞–π—Ç–∏',disable_web_page_preview=True)
    
@dp.message(F.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å')
async def quick_buttons_handler(message: types.Message):
    await message.answer(f'<b>üë• {message.from_user.full_name}, —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n'
                         f'üîñ –¢–≤–æ–π ID: <code>{message.from_user.id}</code>\n'
                         f'ü§ù –¢–≤–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–ª—ã: <code>0</code>\n\n'
                         f'<b>üîó –¢–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n'
                         f'<code>https://t.me/gifttelegrampremiums_bot?start={message.from_user.id}</code>\n\n'
                         f'<i>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π –∏ –∑–Ω–∞–∫–æ–º—ã—Ö, –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å Telegram Premium –∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π</i>',disable_web_page_preview=True)

@dp.message(F.text == '‚ùì FAQ / –ü–æ–º–æ—â—å')
async def quick_buttons_handler(message: types.Message):
    await message.answer(f"""
<b>‚ùì –î–ª—è —á–µ–≥–æ —ç—Ç–æ—Ç –±–æ—Ç?</b>

<b>GTP BOT üåü</b> ‚Äî –±–æ—Ç, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π —Ç–µ–±–µ —á–µ—Ä–µ–∑ –ø—Ä–∏—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å <b>–ª–µ–≥–∫–∏–π –ø–æ–∏—Å–∫</b> Telegram –∫–∞–Ω–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ —Ä–∞–∑—ã–≥—Ä–∞—é—Ç <b>Telegram premium</b>

‚ôªÔ∏è–ë–æ—Ç <b>–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b> –Ω–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–Ω–∞–ª–∞–º–∏ –∏ <b>–æ–±–Ω–æ–≤–ª—è–µ—Ç</b> —É–∂–µ –∏–º–µ—é—â–∏–µ

                         
    <b>üîÑ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b> - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
                         
<i>1Ô∏è‚É£ –¢–æ–ª—å–∫–æ username, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ username –∫–∞–Ω–∞–ª–∞ + –¥–æ–ø.–∫–∞–Ω–∞–ª–ª–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
2Ô∏è‚É£ –¢–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
3Ô∏è‚É£ –ü–æ–¥—Ä–æ–±–Ω—ã–π,–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞, username –∫–∞–Ω–∞–ª–∞ + –¥–æ–ø.–∫–∞–Ω–∞–ª–ª–æ–≤, –∫–æ–ª-–≤–æ –ø—Ä–∏–∑–æ–≤ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à
4Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω–æ–π, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç username –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –∫–æ–ª-–≤–æ –ø—Ä–∏–∑–æ–≤ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞</i>
                   
    <b>üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞</b> - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤

<i>1Ô∏è‚É£ –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∏–∑–æ–≤, —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–∞–Ω–∞–ª—ã –ø–æ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∏–∑–æ–≤ –æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É, —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
2Ô∏è‚É£ –ü–æ –≤—Ä–µ–º–µ–Ω–∏, —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–∞–Ω–∞–ª—ã –ø–æ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Ç —Ä–∞–Ω–Ω–µ–≥–æ –∫ –ø–æ–∑–¥–Ω–µ–º—É, —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑</i>

                         
<b>üìä –¢–û–ü –¥–Ω–∏</b> - <i>–≤—ã–¥–∞—Å—Ç –¢–û–ü3 –¥–Ω—è –ø–æ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤—É —Ä–∞–∑—ã–≥—Ä–∞–Ω–Ω—ã—Ö —Ç–≥–ø</i>
<b>üìä –¢–û–ü –∫–∞–Ω–∞–ª—ã</b> - <i>–≤—ã–¥–∞—Å—Ç –¢–û–ü3 –∫–∞–Ω–∞–ª–∞ –ø–æ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤—É —Ä–∞–∑—ã–≥—Ä–∞–Ω–Ω—ã—Ö —Ç–≥–ø</i>""",disable_web_page_preview=True, reply_markup=get_keyboard())

@dp.message(F.text == 'üîÑ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
async def display_settings_handler(message: types.Message):
    kb = [
            [
                types.KeyboardButton(text="1Ô∏è‚É£ –¢–æ–ª—å–∫–æ username"),
                types.KeyboardButton(text="2Ô∏è‚É£ –¢–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à"),
            ],
            [
                types.KeyboardButton(text="3Ô∏è‚É£ –ü–æ–¥—Ä–æ–±–Ω—ã–π"),
                types.KeyboardButton(text="4Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω–æ–π")
            ]
        ]
    keyboard = types.ReplyKeyboardMarkup(
    keyboard=kb,
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–∞—á–∏"
    )
    await message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è üëÄ</b>", reply_markup=keyboard)

@dp.message(F.text == '1Ô∏è‚É£ –¢–æ–ª—å–∫–æ username')
@dp.message(F.text == '2Ô∏è‚É£ –¢–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à')
@dp.message(F.text == '3Ô∏è‚É£ –ü–æ–¥—Ä–æ–±–Ω—ã–π')
@dp.message(F.text == '4Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω–æ–π')
async def display_mode_handler(message: types.Message):
    display_mode = message.text
    user_id = message.from_user.id
    users_display_modes[user_id] = display_mode

    await message.answer(f"<b>‚ôªÔ∏è –†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:</b> <code>{display_mode}</code>", reply_markup=startmenu())

@dp.message(F.text == 'üîé –ù–∞ —Å–µ–≥–æ–¥–Ω—è')
@dp.message(F.text == 'üîç –ù–∞ –∑–∞–≤—Ç—Ä–∞')
@dp.message(F.text == 'üîÑ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
@dp.message(F.text == 'üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞')
async def quick_buttons_handler(message: types.Message):
    if message.text == 'üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞':
        user_id = message.from_user.id
        current_sort_mode = users_sort_modes.get(user_id, '–ü–æ –≤—Ä–µ–º–µ–Ω–∏')
        new_sort_mode = '–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∏–∑–æ–≤' if current_sort_mode == '–ü–æ –≤—Ä–µ–º–µ–Ω–∏' else '–ü–æ –≤—Ä–µ–º–µ–Ω–∏'
        users_sort_modes[user_id] = new_sort_mode

        await message.answer(f"‚ÑπÔ∏è <b>–†–µ–∂–∏–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:</b> <code>{new_sort_mode}</code>")
        return

    user_id = message.from_user.id
    display_mode = users_display_modes.get(user_id, '–ü–æ–ª–Ω—ã–π')
    sort_mode = users_sort_modes.get(user_id, '–ü–æ –≤—Ä–µ–º–µ–Ω–∏')

    for attempt in range(max_retries):
        try:
            today = datetime.now().strftime("%d.%m.%Y")
            tomorrow = (datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y")

            selected_date = today if message.text == 'üîé –ù–∞ —Å–µ–≥–æ–¥–Ω—è' else tomorrow
            channels_for_date = get_channels_by_date(selected_date)

            if not channels_for_date:
                await message.answer(f"üö´ –ù–∞ {selected_date} –Ω–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                break

            user_id = message.from_user.id
            sort_mode = users_sort_modes.get(user_id, '–ü–æ –≤—Ä–µ–º–µ–Ω–∏')

            if sort_mode == '–ü–æ –≤—Ä–µ–º–µ–Ω–∏':
                channels_for_date.sort(key=itemgetter(4))
            elif sort_mode == '–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∏–∑–æ–≤':
                channels_for_date.sort(key=itemgetter(2))
                channels_for_date.reverse()
            else:
                pass

            current_time = datetime.now()
            result_message = ""
            count_with_username = 0
            user_id = message.from_user.id
            display_mode = users_display_modes.get(user_id, '4Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω–æ–π')

            total_quantity = sum(channel[2] for channel in channels_for_date)

            result_message = ""
            count_with_username = 1

            for i, (name, username, quantity, months, end_time, postid, subscribe, joke1, joke2, joke3, joke4, joke5, joke6, joke7, joke8, joke9, joke10) in enumerate(channels_for_date):
                if not username or (isinstance(subscribe, str) and subscribe.lower() == 'hidden'):
                    continue

                if end_time <= current_time - timedelta(minutes=5):
                    continue

                if display_mode == '3Ô∏è‚É£ –ü–æ–¥—Ä–æ–±–Ω—ã–π':
                    display_text = f"<b>{count_with_username}</b>. {name} | @{username} {' '.join([f'@{joke}' for joke in [joke1, joke2, joke3, joke4, joke5, joke6, joke7, joke8, joke9, joke10] if joke and subscribe])} | <code>{quantity}</code>—Ç–≥–ø(<code>{months}–º–µ—Å.</code>) –≤ <code>{end_time.strftime('%H:%M')}</code>" + (f" | t.me/{username}/{postid}\n" if postid else "\n")
                elif display_mode == '1Ô∏è‚É£ –¢–æ–ª—å–∫–æ username':
                    display_text = f"<b>{count_with_username}</b>. @{username} {' '.join([f'@{joke}' for joke in [joke1, joke2, joke3, joke4, joke5, joke6, joke7, joke8, joke9, joke10] if joke and subscribe])}\n"
                elif display_mode == '2Ô∏è‚É£ –¢–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à':
                    display_text = f"<b>{count_with_username}</b>. t.me/{username}/{postid}\n"
                elif display_mode == '4Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω–æ–π':
                    display_text = f"<b>{count_with_username}</b>. @{username} | <code>{quantity}—Ç–≥–ø</code>(<code>{months}–º–µ—Å.</code>) –≤ <code>{end_time.strftime('%H:%M')}</code>\n"
                else:
                    pass

                result_message += display_text
                count_with_username += 1 if username else 0

            if not result_message.strip():
                await message.answer(f"üö´ <b>–ù–∞</b> <code>{selected_date}</code> <b>—Ä–æ–∑—ã–≥—Ä—ã—à–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.</b>")
                break

            total_message = f"<b>üéÅ –û–±—â–µ–µ –∫–æ–ª-–≤–æ –ø—Ä–∏–∑–æ–≤:</b> <code>{total_quantity}</code><b>—Ç–≥–ø</b>\n\n"
            await message.answer(f"<b>üéâ –†–æ–∑—ã–≥—Ä—ã—à–∏ –Ω–∞</b> <code>{selected_date}</code>\n{total_message}{result_message}", disable_web_page_preview=True)
            break
        except (requests.exceptions.ConnectionError, urllib3.exceptions.ProtocolError) as e:
            await asyncio.sleep(retry_delay)

@dp.message(F.text == 'üìä –¢–û–ü –¥–Ω–∏')
@dp.message(Command("top3days"))
async def top_5_days_handler(message: types.Message):
    connection_giveaways = sqlite3.connect(DATABASE_FILE_GIVEAWAYS)
    cursor_giveaways = connection_giveaways.cursor()
    cursor_giveaways.execute('''
        SELECT SUBSTR(until_date, 9, 2) || '.' || SUBSTR(until_date, 6, 2) || '.' || SUBSTR(until_date, 3, 2) AS formatted_date, SUM(quantity) AS total_quantity
        FROM giveaways
        WHERE username IS NOT NULL
        GROUP BY SUBSTR(until_date, 1, 10)
        ORDER BY total_quantity DESC
        LIMIT 3
    ''')
    top_5_days = cursor_giveaways.fetchall()
    connection_giveaways.close()

    if not top_5_days:
        await message.answer("<b>üö´ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö –æ—Ç—Å—Ç—É—Ç—Å–≤—É–µ—Ç.</b>")
        return

    response = "<b>üìä –¢–æ–ø 3 –¥–Ω—è –ø–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º:</b>\n\n"
    for index, (date, total_quantity) in enumerate(top_5_days, start=1):
        if index == 1:
            response += f"ü•á <b>{date}</b> | <code>{total_quantity}üåü</code>\n"
        elif index == 2:
            response += f"ü•à <b>{date}</b> | <code>{total_quantity}üåü</code>\n"
        elif index == 3:
            response += f"ü•â <b>{date}</b> | <code>{total_quantity}üåü</code>\n"

    await message.answer(response, parse_mode=ParseMode.HTML)

@dp.message(F.text == 'üìä –¢–û–ü –∫–∞–Ω–∞–ª—ã')
@dp.message(Command("top3channels"))
async def top_3_channels_handler(message: types.Message):
    connection_giveaways = sqlite3.connect(DATABASE_FILE_GIVEAWAYS)
    cursor_giveaways = connection_giveaways.cursor()
    cursor_giveaways.execute('''
        SELECT title, username, SUM(quantity) AS total_quantity
        FROM giveaways
        WHERE username IS NOT NULL
        GROUP BY title
        ORDER BY total_quantity DESC
        LIMIT 3
    ''')
    top_3_channels = cursor_giveaways.fetchall()
    connection_giveaways.close()

    if not top_3_channels:
        await message.answer("<b>üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö.</b>")
        return

    response = "<b>üìä –¢–æ–ø 3 –∫–∞–Ω–∞–ª–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:</b>\n\n"
    for index, (title, username, total_quantity) in enumerate(top_3_channels, start=1):
        if index == 1:
            response += f"ü•á <a href='t.me/{username}'><b>{title}</b></a> | <code>{total_quantity}üåü</code>\n"
        elif index == 2:
            response += f"ü•à <a href='t.me/{username}'><b>{title}</b></a> | <code>{total_quantity}üåü</code>\n"
        elif index == 3:
            response += f"ü•â <a href='t.me/{username}'><b>{title}</b></a> | <code>{total_quantity}üåü</code>\n"

    await message.answer(response, disable_web_page_preview=True)

@dp.message(Command("send_all"))
async def admin_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if str(user_id) == str(ADMINID):
        await message.answer('‚úèÔ∏è –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
        await state.set_state(MyForm.message)

@dp.message(MyForm.message)
async def input_message(message: types.Message, state: FSMContext):
    text_to_send = message.text
    await state.update_data(message_text=text_to_send)

    await message.answer('üì∏ –ü—Ä–∏—à–ª–∏ –º–µ–¥–∏–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"')
    await state.set_state(MyForm.media)

@dp.message(MyForm.media)
async def input_media(message: types.Message, state: FSMContext, bot=Bot):
    if message.text == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        photo_to_send = None
    elif message.photo:
        photo_to_send = message.photo[-1].file_id
    else:
        await message.answer('üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ–¥–∏–∞. –ü—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏ "<code>–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å</code>".')
        return

    data = await state.get_data()
    text_to_send = data.get('message_text')

    connection_users = sqlite3.connect(DATABASE_FILE_USERS)
    cursor_users = connection_users.cursor()
    cursor_users.execute("SELECT id FROM users")
    users = cursor_users.fetchall()
    connection_users.close()
    successful_count = 0
    failed_count = 0

    for user_id in users:
        try:
            if photo_to_send:
                await bot.send_photo(user_id[0], photo_to_send, caption=text_to_send, parse_mode=ParseMode.HTML)
            else:
                await bot.send_message(user_id[0], text_to_send, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

            successful_count += 1
            await asyncio.sleep(0.05)
        except Exception as e:
            print(f"Failed to send message to user {user_id}: {e}")
            failed_count += 1

    report_message = f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\nüì• –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful_count}\nüóë –ù–µ—É–¥–∞—á–Ω–æ: {failed_count}"
    await message.answer(report_message)
    await state.clear()

@dp.message(F.text, lambda message: True)
async def unknown_message_handler(message: types.Message):
    await message.answer("<b>–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø—Ä–æ–ø–∏—à–∏—Ç–µ</b> /start")

async def main() -> None:
    bot = Bot(TOKEN, parse_mode=ParseMode.HTML)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())